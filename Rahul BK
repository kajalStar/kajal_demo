# middleware.py
from fastapi import Request, HTTPException, Depends
from starlette.middleware.base import BaseHTTPMiddleware
import jwt
from sqlalchemy.orm import Session
from .repository import AuthRepository
from core.database import get_db
import logging
 
class TokenVerificationMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        # List of public paths that don't require token verification
        public_paths = [
            "/api/v1/auth/login",
            "/docs",
            "/openapi.json",  # FastAPI's automatic OpenAPI schema
            "/favicon.ico"
        ]
       
        # Log the incoming request path for debugging
        logging.info(f"Request path: {request.url.path}")
 
        # Skip authentication for public paths
        if request.url.path in public_paths:
            response = await call_next(request)
            return response
 
        # Get the database session
        db: Session = next(get_db())  # Retrieve a session manually for middleware use
       
        # Extract the token from the Authorization header
        token = request.headers.get("Authorization")
        if token is None or not token.startswith("Bearer "):
            logging.error("Missing or invalid authorization token")
            raise HTTPException(status_code=401, detail="Missing or invalid authorization token")
 
        token = token[7:]  # Remove "Bearer " prefix
       
        try:
            # Decode the token using your secret key and algorithm
            payload = jwt.decode(token, AuthRepository(db).get_secret_key(), algorithms=["HS256"])
            request.state.user = payload  # Store user information in request state for later use
        except jwt.ExpiredSignatureError:
            logging.error("Access token has expired")
            raise HTTPException(status_code=401, detail="Access token has expired")
        except jwt.InvalidTokenError:
            logging.error("Invalid access token")
            raise HTTPException(status_code=401, detail="Invalid access token")
 
        # Call the next middleware or route handler
        response = await call_next(request)
        return response
 
#main.py -  # Define OAuth2 scheme for Bear... by Sushant LambtureSushant Lambture17:06
#main.py - # Define OAuth2 scheme for Bearer token
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="api/v1/auth/login")
 
# app.include_router(auth_router, prefix="/api/v1", tags=["Authentication"])
 
# Customize OpenAPI to include bearer token support
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="Your API",
        version="1.0.0",
        description="API with Bearer token authentication",
        routes=app.routes,
    )
    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
        }
    }
    for path in openapi_schema["paths"].values():
        for method in path.values():
            method["security"] = [{"BearerAuth": []}]
    app.openapi_schema = openapi_schema
    return app.openapi_schema
 
app.openapi = custom_openapi
 # auth.py import jwt # from jose import JWT... by Sushant LambtureSushant Lambture17:06
# auth.py
import jwt
# from jose import JWTError
import bcrypt
from datetime import datetime, timedelta, timezone
from fastapi import HTTPException, Depends, status
from sqlalchemy.orm import Session
from fastapi.security import OAuth2PasswordBearer
from core.database import get_db
from ..user.models import UserModel
from fastapi import FastAPI
from fastapi.openapi.models import OAuthFlows as OAuthFlowsModel, OAuthFlowPassword as OAuthFlowPasswordModel
 
# Define OAuth2 scheme for Swagger UI authorization
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="api/v1/auth/login")
 
async def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    from .repository import AuthRepository
    try:
        # Decode the token
        payload = jwt.decode(token, AuthRepository(db).get_secret_key(), algorithms=["HS256"])
        user_email = payload.get("sub")
        if not user_email:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid access token")
       
        # Optionally, you could fetch user data from the database here
        # user = AuthRepository(db).get_user_by_email(user_email)
        # if user is None:
        #     raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="User not found")
       
        return user_email  # or return user object if you fetched it
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Access token has expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid access token")
 
 
def create_access_token(data: dict, expires_delta: timedelta = None, secret_key: str = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=30)
 
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, secret_key, algorithm="HS256")
    return encoded_jwt
 
def hash_password(password: str, salt: str) -> str:
    """Hash a password using the provided salt."""
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt.encode('utf-8'))
    return hashed_password.decode('utf-8')
 
def verify_password(plain_password: str, hashed_password: str, salt: str) -> bool:
    """Verify a password using the provided salt."""
    return bcrypt.checkpw(plain_password.encode('utf-8'), hashed_password.encode('utf-8'))
 
 
 
has context menu
