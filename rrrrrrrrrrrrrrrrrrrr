import {
    HttpErrorResponse,
    HttpEvent,
    HttpHandler,
    HttpInterceptor,
    HttpRequest,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { catchError, Observable, switchMap, throwError } from 'rxjs';
import { AppStateService } from './app-state-service';
import { Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth.service';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
    constructor(
        private appStateService: AppStateService,
        private router: Router,
        private authService: AuthService
    ) { }

    intercept(
        request: HttpRequest<any>,
        next: HttpHandler
    ): Observable<HttpEvent<any>> {
        const user = this.appStateService.getCurrentUser();
        const token = this.appStateService.getAuthToken() || '';
        const refreshToken = this.appStateService.getRefreshToken() || '';
        const isLoggedIn = user != null && token !== '';

        if (isLoggedIn) {
            request = request.clone({
                setHeaders: {
                    Authorization: `Bearer ${token}`,
                },
            });
        }

        return next.handle(request).pipe(
            catchError((error: HttpErrorResponse) => {
                if (error.status === 401 || error.status === 403) {
                    if (this.isTokenExpiringSoon()) {
                        return this.refreshToken(refreshToken, request, next);
                    } else {
                        this.appStateService.clearUserData();
                        this.router.navigate(['/login']);
                        return throwError(error);
                    }
                }
                return throwError(error);
            })
        );
    }

    private isTokenExpiringSoon(): boolean {
        const expiresAt = localStorage.getItem('expires_at');
        if (expiresAt) {
            const expiryTime = new Date(expiresAt).getTime(); // UTC time
            const currentTime = Date.now(); // Current time in UTC
            const bufferTime = 2 * 60 * 1000; // 2 minutes in milliseconds
            const isExpiringSoon = currentTime >= expiryTime - bufferTime;
            return isExpiringSoon;
        }
        return false;
    }

    private refreshToken(
        refreshToken: string,
        request: HttpRequest<any>,
        next: HttpHandler
    ): Observable<HttpEvent<any>> {
        return this.authService.refreshAccessToken(refreshToken).pipe(
            switchMap((newTokens: any) => {
                this.appStateService.setTokens(newTokens);

                const clonedRequest = request.clone({
                    setHeaders: {
                        Authorization: `Bearer ${newTokens.jwt_token}`,
                    },
                });

                return next.handle(clonedRequest);
            }),
            catchError((refreshError) => {
                this.appStateService.clearUserData();
                this.router.navigate(['/login']);
                return throwError(refreshError);
            })
        );
    }
}
